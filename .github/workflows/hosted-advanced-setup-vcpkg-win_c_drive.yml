# Copyright (c) 2020 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
name: hosted-advanced-setup-vcpkg-autocache-cdrive-win
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-hosted-advanced
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            vcpkgCommitId: '30124253eecff36bc90f73341edbfb4f845e2a1e'
            vcpkgPackages: 'sqlite3'
            configuration: 'x64.*'

    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
      - name: dir
        run: find $RUNNER_TEMP
        shell: bash
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      - name: Set vcpkg's response file path used as part of cache's key.
        uses: lukka/set-shell-env@master
        with:
          VCPKGRESPONSEFILE: ${{ github.workspace }}/cmakeliststxt/vcpkg_${{ matrix.triplet }}.txt
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
          VCPKG_DEST_WIN: C:\qbt_tools\vcpkg
          filter: ^VCPKG.*
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@check_vcpkg_exe_is_valid 
        id: runvcpkg
        with:
          setupOnly: true
          vcpkgDirectory: '${{ env.VCPKG_DEST_WIN }}'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId}}'
          # Ensure the cache key changes any time the content of the response file changes.
          appendedCacheKey: ${{ hashFiles( env.VCPKGRESPONSEFILE ) }}
      - run: |
          $VCPKG_ROOT/vcpkg install @$VCPKGRESPONSEFILE --clean-after-build
        shell: bash
        name: Run vcpkg in a inline script in this workflow.
      - name: Prints output of run-vcpkg's action
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}'"
      - name: Prints output of ANDROID_SDK_ROOT and ANDROID_HOME env var
        run: echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT ANDROID_HOME=$ANDROID_HOME"
        shell: bash
      - name: Run CMake with Ninja Multi-Config
        uses: lukka/run-cmake@main
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakeliststxt/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/b/ninjaMultiConfig'
          cmakeAppendedArgs: '"-GNinja Multi-Config" -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} '
          buildWithCMake: true
      - name: Run CMake+EnvVar (Un*x)
        if: "!contains( matrix.os, 'windows')"
        uses: lukka/run-cmake@main
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakeliststxt/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/b/envvar_ninja'
          cmakeAppendedArgs: '-GNinja -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} -DCMAKE_TOOLCHAIN_FILE=${ANDROID_HOME}/ndk-bundle/build/cmake/android.toolchain.cmake'
          buildWithCMake: false
      - name: Run CMake+EnvVar (Win)
        if: "contains( matrix.os, 'windows')"
        uses: lukka/run-cmake@main
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakeliststxt/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/b/envvar_ninja'
          cmakeAppendedArgs: '-GNinja -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} -DCMAKE_TOOLCHAIN_FILE=%ANDROID_NDK_HOME%/build/cmake/android.toolchain.cmake'
          buildWithCMake: false
      - name: Run CMake+Ninja
        uses: lukka/run-cmake@main
        id: runcmake
        with:
          cmakeListsTxtPath: '${{ github.workspace }}/cmakeliststxt/CMakeLists.txt'
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          useVcpkgToolchainFile: true
          buildWithCMakeArgs: '-- -v'
          buildDirectory: '${{ runner.workspace }}/b/ninja/'
          cmakeAppendedArgs: '-GNinja -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}'
      - name: Run CMake+VS
        uses: lukka/run-cmake@main
        if: contains( matrix.os, 'windows')
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakeliststxt/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/b/vs16'
          cmakeAppendedArgs: '"-GVisual Studio 16 2019" -Ax64 -DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }} '
      - name: 'Run CMake with CMakeSettings.json'
        uses: lukka/run-cmake@main
        with:
          cmakeListsOrSettingsJson: CMakeSettingsJson
          cmakeSettingsJsonPath: '${{ github.workspace }}/cmakesettingsjson/CMakeSettings.json'
          useVcpkgToolchainFile: true
          configurationRegexFilter: ${{ matrix.configuration }}
          cmakeAppendedArgs: '-DVCPKG_TARGET_TRIPLET=${{ env.VCPKG_DEFAULT_TRIPLET }}'

