# Copyright (c) 2019-2020-2021 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
name: hosted-cmakesettingsjson-submod_vcpkg-autocache
on: [push]

jobs:
  job:
    name: ${{ matrix.os }}-hosted-cmakesettingsjson-cache-submod_vcpkg
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            configuration: 'x64.*'
          - os: ubuntu-latest
            triplet: x64-linux
            configuration: 'Linux.*'
          - os: macos-latest
            triplet: x64-osx
            configuration: 'Linux.*'
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
      - name: Set vcpkg's response file path used as part of cache's key.
        uses: lukka/set-shell-env@master
        with:
          VCPKGRESPONSEFILE: ${{ github.workspace }}/cmakesettingsjson/vcpkg_${{ matrix.triplet }}.txt
          filter: VCPKGRESPONSEFILE

      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      - name: Restore artifacts, run vcpkg, build and cache artifacts
        uses: lukka/run-vcpkg@dumplog
        id: runvcpkg
        with:
          vcpkgArguments: '@${{ env.VCPKGRESPONSEFILE }}'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          # Ensure the cache key changes any time the content of the response file changes.
          appendedCacheKey: ${{ hashFiles( env.VCPKGRESPONSEFILE ) }}

      - name: Prints output of run-vcpkg's task
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}' "

      - name: 'CMake+Makefiles'
        uses: lukka/run-cmake@dumplog
        if: contains( matrix.os, 'windows') == false
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakesettingsjson/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/b//unixmakefiles'
          cmakeAppendedArgs: '-G"Unix Makefiles"'
      - name: 'CMake+XCode CMakeListsTxtAdvanced'
        uses: lukka/run-cmake@dumplog
        if: contains( matrix.os, 'macos')
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakesettingsjson/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/b/xcode'
          cmakeAppendedArgs: '-GXcode'
      - name: 'CMake+Ninja CMakeListsTxtAdvanced'
        uses: lukka/run-cmake@dumplog
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/cmakesettingsjson/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: '${{ runner.workspace }}/ninja'
          cmakeAppendedArgs: '-GNinja'
      - name: 'CMakeSettings.json'
        uses: lukka/run-cmake@dumplog
        with:
          cmakeListsOrSettingsJson: CMakeSettingsJson
          cmakeSettingsJsonPath: '${{ github.workspace }}/cmakesettingsjson/CMakeSettings.json'
          useVcpkgToolchainFile: true
          configurationRegexFilter: '${{ matrix.configuration }}'

      - name: dir
        run: find ${{ runner.workspace }}
        if: "!contains( matrix.os, 'windows')"
      - name: dir
        run: gci -recurse ${{ runner.workspace }}
        if: contains( matrix.os, 'windows')
